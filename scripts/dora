#!/usr/bin/env python3

import argparse
import doralite
import gfdlvitals
from tabulate import tabulate
import sys
import subprocess
from tqdm import tqdm

import pandas as pd


class PlotArgs:
    def __init__(self, files_dict):
        self.dbfiles = list(files_dict.keys())
        self.trend = True
        self.align = True
        self.smooth = None
        self.nyears = None
        self.labels = str(",").join(list(files_dict.values()))


class DoraCLI(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description="Command line interface to Dora",
            usage="""dora <command> [<args>]

These commands are available for interacting with Dora:
   list       Lists experiments in a specific project
   search     Searchs experiments listed on Dora for a given string
   info       Prints info/metadata associated with an experiment ID
   repair     Repair FREPP postprocessing
   catalog    Show intake catalog / csv of post-processed output
   plot       Plots scalar diagnostics given a set of Dora IDs
                 e.g. dora plot globalAveOcean idnum1 <idnum2 idnum3 ...>
""",
        )
        parser.add_argument("command", help="Subcommand to run")
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print("Unrecognized command")
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def info(self):
        parser = argparse.ArgumentParser(
            description="Returns experiment metadata"
        )
        parser.add_argument("expid")
        args = parser.parse_args(sys.argv[2:])
        info = doralite.dora_metadata(args.expid)
        print()
        for k in sorted(info.keys()):
            if len(str(info[k])) > 0:
                print("{:14}".format(k) + str(info[k]))

    def catalog(self):
        parser = argparse.ArgumentParser(
            description="Displays intake catalog / csv for an experiment"
        )
        parser.add_argument("expid")
        args = parser.parse_args(sys.argv[2:])
        info = doralite.dora_catalog(args.expid).decode()
        print()
        print(info)

    def plot(self):
        parser = argparse.ArgumentParser(
            description="Plots scalar diagnostics given a set of Dora IDs"
        )
        parser.add_argument("dbfile")
        parser.add_argument("expid", nargs="*")
        args = parser.parse_args(sys.argv[2:])
        files_dict = {}
        for x in args.expid:
            metadata = doralite.dora_metadata(x)
            expname = metadata["expName"]
            dbpath = f"{metadata['pathDB'].replace('gfdlhome','home')}{args.dbfile}.db"
            files_dict[dbpath] = expname
        args = PlotArgs(files_dict)
        gfdlvitals.plot.run_plotdb(args)

    def search(self):
        parser = argparse.ArgumentParser(
            description="Download objects and refs from another repository"
        )
        parser.add_argument("searchstr", nargs="*")
        parser.add_argument("-a", "--attribute", default="pathPP")
        args = parser.parse_args(sys.argv[2:])
        search_results = doralite.search(args.searchstr[0], attribute=args.attribute)
        if len(args.searchstr) > 1:
            for x in args.searchstr[1::]:
                search_results = {k: v for (k, v) in search_results.items() if x in v}
        for k in sorted(search_results.keys()):
            print(f" * {k}  {search_results[k]}")

    def repair(self):
        parser = argparse.ArgumentParser(description="Repairs frepp postprocessing")
        parser.add_argument("expid", nargs="+")
        parser.add_argument("-x", help="Execute commands", action="store_true")
        args = parser.parse_args(sys.argv[2:])

        expid = args.expid
        if len(expid) > 1:
            components = expid[1:]
        else:
            components = None
        expid = expid[0]

        commands = doralite.frepp.repair_all_components(expid, components)

        if args.x is True:
            for cmd in tqdm(commands, desc="Executing commands", unit="cmd"):
                subprocess.run(
                    cmd,
                    shell=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
        else:
            for cmd in commands:
                print(cmd)

    def list(self):
        parser = argparse.ArgumentParser(description="Lists experiments in a project")
        parser.add_argument("project_name", nargs="+")
        parser.add_argument(
            "--pp", help="Print post-processing path", action="store_true"
        )
        args = parser.parse_args(sys.argv[2:])

        results = doralite.list_project(args.project_name[0])["project"]

        sections = [x["title"] for x in results]

        if len(sections) > 1:
            if len(args.project_name) == 2:
                element = int(args.project_name[1])
            else:
                print("")
                for n, x in enumerate(sections):
                    print(f"  {n+1} - {x}")
                print("")

                print(
                    f"The {args.project_name[0]} project has sub-headings. Make a selection: ",
                    end="",
                )
                element = input()
            index = int(element) - 1

        else:
            index = 0

        df = pd.DataFrame(results[index]["experiments"])
        df = df.set_index("id")

        field_list = (
            ["userName", "expName", "pathPP"]
            if args.pp is True
            else ["userName", "expName"]
        )
        df = df[field_list]
        df = df.iloc[::-1]

        print("")
        print(tabulate(df, headers=["ID", "User Name", "Experiment Name"]))


if __name__ == "__main__":
    DoraCLI()
